Filter {
    Expr 
        = FilterWithSelectExpr
        | FilterWithAggregatedSelectExpr
        | AggregatedSelectionClause
        | FilterExpr
        | PropertiesSelectExpr
    
    FilterWithSelectExpr = FilterExpr "->" PropertiesSelectExpr

    FilterWithAggregatedSelectExpr = FilterExpr "->" AggregatedSelectionClause

    FilterExpr = BoolOr
    
    BoolOr
        = BoolOr orOperation BoolAnd -- or
        | BoolAnd

    BoolAnd 
        = BoolAnd andOperation PriExp  --and
        | PriExp
        
    PriExp 
        = "(" FilterExpr ")" -- paren
        | ComparisonExp

    ComparisonExp = EqualityExpr | LessThanExpr | MoreThanExpr | LessThanOrEqualExpr | MoreThanOrEqualExpr | NonEqualityExpr | StartsWithExpr | EndsWithExpr | exactElement

    EqualityExpr = propertySequence "=" expressionConst
    
    LessThanExpr = propertySequence "<" expressionConst
    
    MoreThanExpr = propertySequence ">" expressionConst
    
    LessThanOrEqualExpr = propertySequence "<=" expressionConst
    
    MoreThanOrEqualExpr = propertySequence ">=" expressionConst

    NonEqualityExpr = propertySequence nonEqualSign expressionConst

    StartsWithExpr = propertySequence likeWord startsWithConst

    EndsWithExpr = propertySequence likeWord endsWithConst

    AggregatedSelectionClause = AggregatedFuncsExpr | AnyAggregatedFuncExpr

    AggregatedFuncsExpr = AnyAggregatedFuncExpr ("," AnyAggregatedFuncExpr)*

    AnyAggregatedFuncExpr = AggregatedNamedFuncExpr | AggregatedFuncExpr

    AggregatedNamedFuncExpr = AggregatedFuncExpr asWord propertyNameIdentifier

    AggregatedFuncExpr = AggregatedCountExpr | AggregatedSumExpr | AggregatedMinExpr | AggregatedMaxExpr

    AggregatedCountExpr = countWord "()"

    AggregatedSumExpr = sumWord "(" propertySequence ")"

    AggregatedMinExpr = minWord "(" propertySequence ")"

    AggregatedMaxExpr = maxWord "(" propertySequence ")"

    PropertiesSelectExpr = PropertiesExpr | PropertyIdentifierExpr

    PropertiesExpr = PropertyIdentifierExpr ("," PropertyIdentifierExpr)*

    PropertyIdentifierExpr
        = NamedPropertyExpr
        | propertySequence

    NamedPropertyExpr = propertySequence asWord propertyNameIdentifier

    propertyNameIdentifier = (letter | digit | "_")+

    propertySequence = property | directProperty
                    
    property 
        =  propertySequence "." categoryOrProperty --ofPropertySequence
        | directAnyPropertySequence "." categoryOrProperty --ofDirectAnyPropertySequence
        | directAnyProperty "." categoryOrProperty --ofDirectAny
                    
    directProperty 
        = categoryOrProperty "." categoryOrProperty --ofCategory
        | anyProperty "." categoryOrProperty --ofAnyProperty
        
    directAnyPropertySequence = propertySequence "." anyProperty
        
    directAnyProperty = directAnyProperty "." anyProperty --sequenced
        | categoryOrProperty "." anyProperty --ofCategory
        | anyProperty "." anyProperty --ofAny
        
    exactElement = propertySequence "!" --ofPropertySequence
        | categoryOrProperty "!" --ofCategory
    
    categoryOrProperty (element category or property)
        = "[" identificator "]" --inBrackets 
        | alnum+ --value

    maxWord = caseInsensitive<"max">

    minWord = caseInsensitive<"min">

    sumWord = caseInsensitive<"sum">

    countWord = caseInsensitive<"count">

    asWord = caseInsensitive<"as">

    nonEqualSign = "<>" | "!="
        
    andOperation = andWord | "&&" | "&"

    andWord = caseInsensitive<"and">
    
    orOperation = orWord | "||" | "|"

    orWord = caseInsensitive<"or">

    likeWord = caseInsensitive<"like">
    
    anyProperty = "*"
    
    identificator = (~"]" ~"[" any)+
    
    expressionConst = textConst | number

    startsWithConst
        = "\"" likeTextValue "%\""

    endsWithConst
        = "\"%" likeTextValue "\""
    
    textConst (target text value)
        = "\"" textValue "\""
        
    textValue = textChar*

    likeTextValue = likeTextChar*
    
    textChar
        = "\\\""
        | (~"\"" any)

    likeTextChar
        = "\\\""
        | "\\%"
        | (~("\"" | "%") any)
        
    number
      = positiveNumber
      | negativeNumber
      
    negativeNumber = "-" positiveNumber
    
    positiveNumber = realNumber | integerNumber
      
    integerNumber = digit+
    
    realNumber = digit* "." digit+
}